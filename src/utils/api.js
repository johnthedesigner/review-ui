var Promise, VERSION, apiBase, assembleUrl, d3, getToken, redirectToLogin, resultCallback, storage, toQueryString, token, tokenAuthRequest;

d3 = require('d3');

Promise = require('promise');

apiBase = require('./api-base');

redirectToLogin = require('./common').redirectToLogin;

storage = require('./storage');

VERSION = '/api/v4';

getToken = function() {
  var storedToken;
  storedToken = storage.load(storage.KEYS.token);
  if (storedToken != null) {
    try {
      storedToken = JSON.parse(storedToken);
    } catch (_error) {
      storedToken = void 0;
      console.warn('Failed to JSON parse stored token. Clearing stored token.');
      storage.clear(storage.KEYS.token);
    }
  }
  return storedToken;
};

token = getToken();

tokenAuthRequest = function(url) {
  return d3.json(url).header('Authorization', 'Token ' + token);
};

toQueryString = function(obj) {
  var args, key, val;
  args = (function() {
    var ref, results;
    results = [];
    for (key in obj) {
      val = obj[key];
      ref = [key, val].map(encodeURIComponent), key = ref[0], val = ref[1];
      results.push(key + '=' + val);
    }
    return results;
  })();
  return args.join('&');
};

assembleUrl = function(path, params) {
  return apiBase + path + (params != null ? '?' + toQueryString(params) : '');
};

resultCallback = function(res, rej) {
  return function(err, data) {
    var apiErr, defaultErr, e, error, ref, result;
    if (err != null) {
      defaultErr = {
        code: 'ERROR',
        message: 'An error occurred while attempting to access the Luminoso API'
      };
      try {
        apiErr = JSON.parse(err.response).error;
        if (err.status === 401 && ((ref = apiErr.code) === 'NO_SIGNATURE' || ref === 'INVALID_TOKEN')) {
          return redirectToLogin(true);
        } else {
          return rej(apiErr != null ? apiErr : defaultErr);
        }
      } catch (_error) {
        e = _error;
        return rej(defaultErr);
      }
    } else {
      result = data.result, error = data.error;
      if (error != null) {
        return rej(error);
      } else {
        return res(result);
      }
    }
  };
};

module.exports = {
  getToken: getToken,
  setToken: function(t) {
    token = t;
    return storage.save(storage.KEYS.token, JSON.stringify(t));
  },
  clearToken: function() {
    token = null;
    return storage.clear(storage.KEYS.token);
  },
  hasToken: function() {
    return token != null;
  },
  get: function(path, params) {
    return new Promise(function(res, rej) {
      return tokenAuthRequest(assembleUrl(path, params)).get(resultCallback(res, rej));
    });
  },
  put: function(path, params) {
    return new Promise(function(res, rej) {
      return tokenAuthRequest(assembleUrl(path, params)).send('PUT', resultCallback(res, rej));
    });
  },
  del: function(path, params) {
    return new Promise(function(res, rej) {
      return tokenAuthRequest(assembleUrl(path, params)).send('DELETE', resultCallback(res, rej));
    });
  },
  putWithBody: function(path, body) {
    return new Promise(function(res, rej) {
      return tokenAuthRequest(assembleUrl(path)).header('Content-Type', 'application/json').send('PUT', body, resultCallback(res, rej));
    });
  },
  postWithParams: function(path, params) {
    return new Promise(function(res, rej) {
      return tokenAuthRequest(assembleUrl(path)).header('Content-Type', 'application/x-www-form-urlencoded').post(toQueryString(params), resultCallback(res, rej));
    });
  },
  postWithBody: function(path, body) {
    return new Promise(function(res, rej) {
      return tokenAuthRequest(assembleUrl(path)).header('Content-Type', 'application/json').post(body, resultCallback(res, rej));
    });
  },
  VERSION: VERSION
};

// ---
// generated by coffee-script 1.9.2